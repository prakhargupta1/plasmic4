// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uNxv2NFifzUHnvGHuxCCRo
// Component: vJ7kGdsvlt
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Divider from "../../Divider"; // plasmic-import: Vz1ZBT6iUN/component
import { Iframe } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: CMDBvOhaI4s/codeComponent
import BigBenefit from "../../BigBenefit"; // plasmic-import: cKaSM5MZGd/component
import UseCaseCard from "../../UseCaseCard"; // plasmic-import: 00VatMkQtB/component
import Button from "../../Button"; // plasmic-import: UIm1GB26uIb/component

import { useScreenVariants as useScreenVariants_6Z1WhWlzfNyxo } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6Z1WhWlzfNYXO/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_toolpad_landing_page.module.css"; // plasmic-import: uNxv2NFifzUHnvGHuxCCRo/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: vJ7kGdsvlt/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: mAUNgy6MUNR/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: d3R2_08IWyn/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: ZzixmYAI_0V/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: Gl6_oKxuPZr/icon

export type PlasmicHome__VariantMembers = {};

export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  iframe?: p.Flex<typeof Iframe>;
  h2?: p.Flex<"h2">;
};

export interface DefaultHomeProps {}

export const defaultHome__Args: Partial<PlasmicHome__ArgsType> = {};

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultHome__Args, props.args);
  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6Z1WhWlzfNyxo()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__f7Bxb)}>
            <div className={classNames(projectcss.all, sty.freeBox__zwAzE)}>
              <div className={classNames(projectcss.all, sty.freeBox__u71Pb)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__dtXzu)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("50px" as const)
                      : ("60px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/toolpad_landing_page/images/screenshot20220513At125213AmRemovebgPreviewpng.png",
                    fullWidth: 194,
                    fullHeight: 196,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5EvRi
                  )}
                >
                  {"Toolpad"}
                </div>

                <p.PlasmicLink
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(projectcss.all, projectcss.a, sty.link)}
                  component={Link}
                  href={"https://github.com/mui/mui-toolpad" as const}
                  platform={"nextjs"}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__nbLm6)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("100%" as const)
                        : ("50px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("60px" as const)
                        : ("50px" as const)
                    }
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/toolpad_landing_page/images/gitHubMark64Pxpng.png",
                      fullWidth: 64,
                      fullHeight: 64,
                      aspectRatio: undefined
                    }}
                  />
                </p.PlasmicLink>
              </div>

              <Divider
                className={classNames("__wab_instance", sty.divider__qF1J)}
              />

              <div className={classNames(projectcss.all, sty.columns__wqeSh)}>
                <div className={classNames(projectcss.all, sty.column__d7TVp)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__j9SEc
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"Build simple React Apps 10x faster"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.column__lWaa)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yR1CX)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6HqI
                      )}
                    >
                      {
                        "Gain the speed of low-code with the flexibility of React code. MUI Toolpad is an open-core platform ideal to build internal tools and simple apps."
                      }
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__pQ0EM)}
                    >
                      <Iframe
                        data-plasmic-name={"iframe"}
                        data-plasmic-override={overrides.iframe}
                        className={classNames("__wab_instance", sty.iframe)}
                        preview={true}
                        src={
                          "https://f0433e60.sibforms.com/serve/MUIEAMLDmNEGxKod-HET6aBenVotxkCSl-8saXZ_UHhW-clFX8FQaUqGf67bQlE06W9Lg9df7QtUPKQkWp3TzmwvTr-ZBckfz85y-wq5Dhfs17ATt_vHSJ8PRh8SvQW_U3CWaoX_OJnqA9OgUjE8_5zlRGtw1MC4xW-uYgxYa6ZTQvgYD0zNJYWvt7BhNShTPwJohHe_roUz5zgp" as const
                        }
                      />
                    </div>
                  </div>
                </div>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__k5A8H)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___4AZnf)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("196px" as const)
                      : ("500px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("350px" as const)
                      : ("955px" as const)
                  }
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : ("100%" as const)
                  }
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/toolpad_landing_page/images/screenshot20220512At13300PMpng.png",
                    fullWidth: 2864,
                    fullHeight: 1570,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__yrrUb)}>
            <BigBenefit
              className={classNames("__wab_instance", sty.bigBenefit__g9Uds)}
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___79Tn3
                  )}
                >
                  {"WYSIWYG App builder"}
                </div>
              }
              slot2={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___9L6Wf)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("226px" as const)
                      : ("421px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/toolpad_landing_page/images/screenshot20220512At112620PMpng.png",
                    fullWidth: 984,
                    fullHeight: 600,
                    aspectRatio: undefined
                  }}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zp0D
                )}
              >
                {
                  "The canvas comes with no restrictions, just drag a component and start building. It auto stacks. "
                }
              </div>
            </BigBenefit>

            <BigBenefit
              className={classNames("__wab_instance", sty.bigBenefit__rk1M)}
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c4Oq
                  )}
                >
                  {"Import and export ESM"}
                </div>
              }
              slot2={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__jnGgu)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/toolpad_landing_page/images/screenshot20220513At24647AMpng.png",
                    fullWidth: 1448,
                    fullHeight: 946,
                    aspectRatio: undefined
                  }}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5VsB
                )}
              >
                {
                  "Have a custom component that you want to use? Bring it on!\nA component built in Toolpad can also be exported and used as URL."
                }
              </div>
            </BigBenefit>

            <BigBenefit
              className={classNames("__wab_instance", sty.bigBenefit___2UyNp)}
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__p2H1D
                  )}
                >
                  {"Control styling"}
                </div>
              }
              slot2={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__pab6V)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/toolpad_landing_page/images/screenshot20220512At112620PMpng.png",
                    fullWidth: 984,
                    fullHeight: 600,
                    aspectRatio: undefined
                  }}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lB8W
                )}
              >
                {
                  "The sx prop from MUI v5 is a powerful way to use any CSS property and gives direct access to the MUI theme."
                }
              </div>
            </BigBenefit>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__xmwr0)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___56T)}
            >
              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Key Benefits"
                  : "Product features"}
              </h2>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kuxh)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__oK5Vk)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__i4Epx)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___47DNe
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wBcBl
                        )}
                      >
                        <Icon8Icon
                          className={classNames(projectcss.all, sty.svg__l9E9N)}
                          role={"img"}
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0LnH
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__dxmxV
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gJa8H
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0RBkQ
                          )}
                        >
                          {"Connect to multiple data sources"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wfhZ
                          )}
                        >
                          {
                            "Connect in minutes, without altering your existing data sources."
                          }
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__r8UVe)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wfwNq)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__aaNah
                        )}
                      >
                        <Icon13Icon
                          className={classNames(projectcss.all, sty.svg__hdOiL)}
                          role={"img"}
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___5Z0Zy
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__nl0JB
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jM2Ll
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rV57
                          )}
                        >
                          {"Self-host, on-prem deployment"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sx6Oj
                          )}
                        >
                          {
                            "Use Toolpad in a secure environment and keep control on your data."
                          }
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__vHe4M)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__dc5Op)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__zSyK2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0VrR0
                        )}
                      >
                        <Icon8Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___39CZ5
                          )}
                          role={"img"}
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wvUcs
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__fv6Dh
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lytj
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wtTnL
                          )}
                        >
                          {"All MUI components supported"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ledQw
                          )}
                        >
                          {"Choose from 50+ performant MUI components."}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__qIyG8)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__al8V)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___43UoP
                        )}
                      >
                        <Icon13Icon
                          className={classNames(projectcss.all, sty.svg__uvooj)}
                          role={"img"}
                        />
                      </div>

                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bQeWj
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__gufiu
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ove4Y
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mdcee
                          )}
                        >
                          {"Real-time collaboration"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__id122
                          )}
                        >
                          {
                            "Move faster with a multi-user application  experience."
                          }
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </div>
                </p.Stack>
              </p.Stack>
            </p.Stack>

            <Divider
              className={classNames("__wab_instance", sty.divider__iG11X)}
            />
          </div>

          <div className={classNames(projectcss.all, sty.freeBox___0TEEp)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8WC7Y
              )}
            >
              {"Use cases"}
            </div>
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns__c69Pr)}
          >
            <div className={classNames(projectcss.all, sty.column__bfTr6)}>
              {true ? (
                <UseCaseCard
                  className={classNames(
                    "__wab_instance",
                    sty.useCaseCard___2CSjH
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__euv5P
                    )}
                  >
                    {"Admin Panel"}
                  </div>
                </UseCaseCard>
              ) : null}
            </div>

            <div className={classNames(projectcss.all, sty.column__vmRl2)}>
              <UseCaseCard
                className={classNames("__wab_instance", sty.useCaseCard__dgGhO)}
              >
                {"Customer portals"}
              </UseCaseCard>
            </div>

            <div className={classNames(projectcss.all, sty.column__opWyg)}>
              <UseCaseCard
                className={classNames("__wab_instance", sty.useCaseCard__rFtqe)}
              >
                {"Reusable widgets"}
              </UseCaseCard>
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___5D7Sv)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___9K1Ql)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__oGopm)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___16XuQ)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6W5Wy
                    )}
                  >
                    {"Pricing plans"}
                  </div>
                </div>

                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cXsG)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__repp
                      )}
                    >
                      {"Currently Toolpad is only available to Self-host!"}
                    </div>
                  </div>
                ) : null}
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__rlpoq)}
              >
                <div className={classNames(projectcss.all, sty.column__nilG4)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__azFli)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4KeXv
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.freeBox__agS)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vlPx6
                          )}
                        >
                          {"Community"}
                        </div>

                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__weSRs
                          )}
                        >
                          {"Self-host"}
                        </Button>
                      </p.Stack>
                    </p.Stack>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__gmCb9)}
                    />

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__iB7Vo)}
                    >
                      <ul
                        className={classNames(
                          projectcss.all,
                          projectcss.ul,
                          sty.ul__mQGas
                        )}
                      >
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__jbBx4
                          )}
                        >
                          {"Unlimited apps"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__lrF1W
                          )}
                        >
                          {"Unlimited users"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__kHmpI
                          )}
                        >
                          {"Unlimited connections"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__f7RXs
                          )}
                        >
                          {"Access to all MUI components"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li___4Wh51
                          )}
                        >
                          {"Install with Docker compose"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__zYu6V
                          )}
                        >
                          {"Community support"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__vg44
                          )}
                        >
                          {"Bring your own components"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__jgIVl
                          )}
                        >
                          {"Eject ESM"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__kR7Ec
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontStyle: "italic" }}
                            >
                              {"And more!"}
                            </span>
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </li>
                      </ul>

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__sXkWf
                        )}
                        showEndIcon={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dJrst
                          )}
                        >
                          {"Get started"}
                        </div>
                      </Button>
                    </p.Stack>
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.column__yaNWb)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qh1Jt)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__i8Lpy)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ewpDk
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bpgp
                          )}
                        >
                          {"Starter"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__jKjBu)}
                    />

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__cnu5M)}
                    >
                      <ul
                        className={classNames(
                          projectcss.all,
                          projectcss.ul,
                          sty.ul__nQj0I
                        )}
                      >
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__y2Pg
                          )}
                        >
                          {"All features of Community plan\n"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__bUoLa
                          )}
                        >
                          {"Both self host and cloud variants"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__v0HfD
                          )}
                        >
                          {"Role based access control\n"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__bWxKb
                          )}
                        >
                          {"Version control\n"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__bqnDv
                          )}
                        >
                          {"SSO (Google & GitHub)\n"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__dmoV3
                          )}
                        >
                          {"Real time commenting\n"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__rkufx
                          )}
                        >
                          {"Git Sync"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__yFo5I
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontStyle: "italic" }}
                            >
                              {"And more!"}
                            </span>
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </li>
                      </ul>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6IZYi
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aXdtP
                          )}
                        >
                          {"$TBD/month"}
                        </div>
                      </div>

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__jclSi
                        )}
                        color={"green" as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__o5Xer
                          )}
                        >
                          {"Request Early Access"}
                        </div>
                      </Button>
                    </p.Stack>
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.column__y4Tn)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___9AH)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___8G0Jv
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1Meap
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__r2Lqt
                          )}
                        >
                          {"Enterprise"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__lcNRi)}
                    />

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___8D3YS
                      )}
                    >
                      <ul
                        className={classNames(
                          projectcss.all,
                          projectcss.ul,
                          sty.ul__x3UUv
                        )}
                      >
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__bWKmq
                          )}
                        >
                          {"All features of Startup plan"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__drcKu
                          )}
                        >
                          {"Granular access control"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__mefy7
                          )}
                        >
                          {"Multiple environments"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__tlIDw
                          )}
                        >
                          {"Audit Logs"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__my5F
                          )}
                        >
                          {"Premium support"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li___5Kvug
                          )}
                        >
                          {"White label (Custom domain & branding)"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__heUvX
                          )}
                        >
                          {"Custom SSO"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li___8JsVr
                          )}
                        >
                          {"Analytics"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__csBqO
                          )}
                        >
                          {"Access to advanced MUI components"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__tukq
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontStyle: "italic" }}
                            >
                              {"And more!"}
                            </span>
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </li>
                      </ul>

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__lb1XP
                        )}
                        color={"blue" as const}
                        isDisabled={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oVd29
                          )}
                        >
                          {"To be announced"}
                        </div>
                      </Button>
                    </p.Stack>
                  </div>
                </div>
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "iframe", "h2"],
  link: ["link"],
  iframe: ["iframe"],
  h2: ["h2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  iframe: typeof Iframe;
  h2: "h2";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHome__ArgProps,
      internalVariantPropNames: PlasmicHome__VariantProps
    });

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    iframe: makeNodeComponent("iframe"),
    h2: makeNodeComponent("h2"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
