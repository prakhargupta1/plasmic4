// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uNxv2NFifzUHnvGHuxCCRo
// Component: 00VatMkQtB
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_toolpad_landing_page.module.css"; // plasmic-import: uNxv2NFifzUHnvGHuxCCRo/projectcss
import sty from "./PlasmicUseCaseCard.module.css"; // plasmic-import: 00VatMkQtB/css

export type PlasmicUseCaseCard__VariantMembers = {};

export type PlasmicUseCaseCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicUseCaseCard__VariantsArgs;
export const PlasmicUseCaseCard__VariantProps = new Array<VariantPropType>();

export type PlasmicUseCaseCard__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicUseCaseCard__ArgsType;
export const PlasmicUseCaseCard__ArgProps = new Array<ArgPropType>("children");

export type PlasmicUseCaseCard__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  columns?: p.Flex<"div">;
  column?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultUseCaseCardProps {
  children?: React.ReactNode;
  className?: string;
}

export const defaultUseCaseCard__Args: Partial<PlasmicUseCaseCard__ArgsType> =
  {};

function PlasmicUseCaseCard__RenderFunc(props: {
  variants: PlasmicUseCaseCard__VariantsArgs;
  args: PlasmicUseCaseCard__ArgsType;
  overrides: PlasmicUseCaseCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultUseCaseCard__Args, props.args);
  const $props = args;

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          sty.root
        )}
      >
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"auto" as const}
          loading={"lazy" as const}
          src={{
            src: "/plasmic/toolpad_landing_page/images/screenshot20220513At14335AMpng.png",
            fullWidth: 666,
            fullHeight: 408,
            aspectRatio: undefined
          }}
        />

        <div
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          className={classNames(projectcss.all, sty.columns)}
        >
          <div
            data-plasmic-name={"column"}
            data-plasmic-override={overrides.column}
            className={classNames(projectcss.all, sty.column)}
          >
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Admin Panel",
                value: args.children,
                className: classNames(sty.slotTargetChildren)
              })}
            </div>
          </div>
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "columns", "column", "freeBox"],
  img: ["img"],
  columns: ["columns", "column", "freeBox"],
  column: ["column", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  columns: "div";
  column: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUseCaseCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUseCaseCard__VariantsArgs;
    args?: PlasmicUseCaseCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUseCaseCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUseCaseCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicUseCaseCard__ArgProps,
      internalVariantPropNames: PlasmicUseCaseCard__VariantProps
    });

    return PlasmicUseCaseCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUseCaseCard";
  } else {
    func.displayName = `PlasmicUseCaseCard.${nodeName}`;
  }
  return func;
}

export const PlasmicUseCaseCard = Object.assign(
  // Top-level PlasmicUseCaseCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicUseCaseCard
    internalVariantProps: PlasmicUseCaseCard__VariantProps,
    internalArgProps: PlasmicUseCaseCard__ArgProps
  }
);

export default PlasmicUseCaseCard;
/* prettier-ignore-end */
